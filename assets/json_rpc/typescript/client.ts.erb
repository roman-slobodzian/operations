const DEFAULT_HEADERS = {
  'Accept': 'application/json',
  'Content-Type': 'application/json',
};

interface OperationsClientParams {
  endpoint: string
  userToken?: string
  debug?: boolean
}

<% operation_presenters.each do |operation| %>
  export namespace <%= operation.namespace_name %> {
    <% if operation.validation_contract %>
      export type Params = <%= operation.render_params_types %>
    <% else %>
      export type Params = void;
    <% end %>

    <% if operation.defined_normalizer %>
      export type Result = <%= operation.render_result_types %>
    <% else %>
      export type Result = void;
    <% end %>
  }
<% end %>

export default class OperationsClient {
  lastId: number
  endpoint: string
  userToken?: string
  isDebugEnabled: boolean

  constructor({ endpoint, userToken, debug }: OperationsClientParams) {
    this.lastId = 0;
    this.endpoint = endpoint;
    this.userToken = userToken;
    this.isDebugEnabled = debug || false;
  }

  <%= render_call_methods %>

  request(method: string, ...params: any[]) {
    const id = this.lastId++;

    const req = {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        jsonrpc: '2.0',
        id,
        method,
        params: Array.isArray(params) ? params : [params],
      }),
    };

    if (this.isDebugEnabled === true) {
      console.log('Executing request', this.lastId, 'to', this.endpoint, ':', req);
    }

    return fetch(this.endpoint, req)
      .then(res => this.checkResponseStatus(req, res))
      .then(res => res.json())
      .then(res => this.checkError(res, req))
  }

  checkError(response: any, request: any) {
    console.log(response, request)

    return response
  }

  checkResponseStatus(request: any, response: any) {
    if (response.status === 200) return response;

    throw new RpcError(response.statusText, request, response);
  }
}

export class RpcError extends Error {
  request: any
  response: Response

  constructor(message: string, request: any, response: Response) {
    super(message);

    this.name = 'RpcError';
    this.message = (message || '');
    this.request = request;
    this.response = response;
  }
}
